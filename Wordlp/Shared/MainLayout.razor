@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject IResizeListener ResizeListener

<div id="wordlp" class="@(IsDark ? "dark-mode" : "")" style="height: @(Height)px;">

    <header class="app-header">
        <div class="header-start">

        </div>
        <p class="app-title">
            @foreach(var letter in "WORDLP")
            {
                <div>@letter</div>
            }
        </p>
        <div class="header-end">
            <button id="dark-mode-toggler" @onclick="ToggleDark">
                <i class="@(IsDark? "fa-solid" : "fa-regular") fa-moon fa-lg" />
            </button>
        </div>        
    </header>

    <main>
        @Body
    </main>
</div>

@code {
    private const string DarkModeKey = "wordlp-DarkMode";
    private bool IsDark { get; set; }
    private double Height { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!await LocalStorage.ContainKeyAsync(DarkModeKey))
            await LocalStorage.SetItemAsync(DarkModeKey, true);

        IsDark = await LocalStorage.GetItemAsync<bool>(DarkModeKey);
        StateHasChanged();

        var size = await ResizeListener.GetBrowserWindowSize();
        Height = size.Height;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ResizeListener.OnResized += HandleResize;
    }

    private void HandleResize(object? _, BrowserWindowSize size)
    {
        Height = size.Height;
        StateHasChanged();
    }

    private async Task ToggleDark()
    {
        IsDark = !IsDark;
        await LocalStorage.SetItemAsync(DarkModeKey, IsDark);
    }
}