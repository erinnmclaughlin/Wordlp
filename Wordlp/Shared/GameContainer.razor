@inject Game Game
@inject PlayerHistoryService PlayerHistory
@inject WordCollection Words
@implements IDisposable

<PageTitle>Word-LP</PageTitle>

<CascadingValue Value="this">
    <GameBoard Guess="@Game.Guess" />
    @if (Game.IsGameOver)
    {
        <GameOverButtons />
    }
    else
    {
        <Keyboard @bind-Guess="@Game.Guess" />
    }
    
    <GameOverModal />
</CascadingValue>

@code {

    public void Dispose()
    {
        Game.OnGameOver -= OnGameOver;
        Game.OnGameStart -= OnGameStart;
    }

    public Guess? GetGuessByIndex(int index)
    {
        return Game.Guesses.ElementAtOrDefault(index);
    }

    public GuessResult GetLetterResult(char letter)
    {
        var letters = Game.Guesses.SelectMany(g => g.Letters.Where(l => l.Value == letter));

        if (letters.Any(l => l.Result == GuessResult.Match))
            return GuessResult.Match;

        if (letters.Any(l => l.Result == GuessResult.Contains))
            return GuessResult.Contains;

        return GuessResult.None;
    }

    public bool HasBeenGuessed(char letter)
    {
        return Game.Guesses.Any(g => g.Contains(letter));
    }

    public bool IsCurrentGuess(int guessNumber)
    {
        return Game.Guesses.Count == guessNumber;
    }

    public void SubmitGuess()
    {
        if (Game.IsGameOver) 
            return;

        if (!Words.IsValid(Game.Guess))
        {
            Game.NotifyInvalidSubmit();
            return;
        }

        List<GuessedLetter> letters = new();

        for (int i = 0; i < Game.Guess.Length; i++)
        {
            var letter = Game.Guess[i];

            /* No match */
            if (!Game.Solution.Value.Contains(letter))
            {
                letters.Add(new GuessedLetter(letter, GuessResult.None));
                continue;
            }

            /* Exact match */
            if (Game.Solution.Value[i] == letter)
            {
                letters.Add(new GuessedLetter(letter, GuessResult.Match));
                continue;
            }

            /* Partial match */
            if (Game.Solution.GetLetters().Any(l => l.Value == letter && Game.Guess[l.Index] != l.Value))
            {
                letters.Add(new GuessedLetter(letter, GuessResult.Contains));
                continue;
            }

            letters.Add(new GuessedLetter(letter, GuessResult.None));
        }

        var guess = new Guess(letters);
        Game.Guesses.Add(guess);

        if (Game.Guesses.Count == GameSettings.MaxGuesses || guess.IsWin())
            Game.GameOver();

        Game.Guess = string.Empty;
        StateHasChanged();
    }

    public GuessResult VerifyLetterPosition(char letter, int index)
    {
        if (Game.Solution.Value[index] == letter)
            return GuessResult.Match;

        if (Game.Solution.Value.Contains(letter))
            return GuessResult.Contains;

        return GuessResult.None;
    }

    protected override void OnInitialized()
    {
        Game.OnGameOver += OnGameOver;
        Game.OnGameStart += OnGameStart;
    }

    protected override async Task OnInitializedAsync()
    {
        await Game.NewGame();
    }

    private async void OnGameOver(object? o, EventArgs e)
    {
        await PlayerHistory.SaveAttempt(Game.Solution, Game.Guesses.Count);
    }

    private void OnGameStart(object? o, EventArgs e)
    {
        StateHasChanged();
    }
}