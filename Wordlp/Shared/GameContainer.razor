@inject Game Game
@inject PlayerHistoryService PlayerHistory
@inject WordCollection Words
@implements IDisposable

<GameBoard @bind-Guess="@Game.CurrentGuess" />

@if (Game.IsGameOver)
{
    <GameOverButtons />
}
else
{
    <Keyboard @bind-Guess="@Game.CurrentGuess" />
}

<GameOverModal />

@code {

    public void Dispose()
    {
        Game.OnGameOver -= OnGameOver;
        Game.OnGameStart -= OnGameStart;
        Game.OnValidSubmit -= OnValidSubmit;
    }

    protected override void OnInitialized()
    {
        Game.OnGameOver += OnGameOver;
        Game.OnGameStart += OnGameStart;
        Game.OnValidSubmit += OnValidSubmit;
    }

    protected override async Task OnInitializedAsync()
    {
        await Game.Load();
    }

    private async void OnGameOver(object? o, EventArgs e)
    {
        await PlayerHistory.SaveAttempt(Game.Solution, Game.Guesses.Count);
    }

    private void OnGameStart(object? o, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnValidSubmit(object? o, EventArgs e)
    {
        StateHasChanged();
    }
}