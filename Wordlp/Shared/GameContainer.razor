@inject Game Game
@inject IGamePersistence GamePersistence
@implements IDisposable

<GameBoard @bind-Guess="@Game.CurrentGuess" />

@if (Game.IsGameOver())
{
    <div style="height: 200px; width: 250px;">
        <GameOverButtons />
    </div>    
}
else
{
    <Keyboard @bind-Guess="@Game.CurrentGuess" />
}

<GameOverModal />

@code {

    public void Dispose()
    {
        Game.OnGameStart -= TriggerSaveGame;
        Game.OnValidSubmit -= TriggerSaveGame;
    }

    public async Task SaveGame()
    {
        await GamePersistence.SaveGame(Game);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Game.OnGameStart += TriggerSaveGame;
        Game.OnValidSubmit += TriggerSaveGame;
    }

    protected override async Task OnInitializedAsync()
    {
        await GamePersistence.Validate();

        if (await GamePersistence.LoadGame() is SavedGame savedGame)
            Game.LoadGame(savedGame);
        else
            await Game.NewGame();
    }

    private async void TriggerSaveGame(object? o, EventArgs e)
    {
        await SaveGame();
    }
}