@inject Game Game
@inject PlayerHistoryService PlayerHistory
@inject WordCollection Words
@implements IDisposable

<PageTitle>Word-LP</PageTitle>

<CascadingValue Value="this">
    <GameBoard @bind-Guess="@Game.CurrentGuess" />
    @if (Game.IsGameOver)
    {
        <GameOverButtons />
    }
    else
    {
        <Keyboard @bind-Guess="@Game.CurrentGuess" />
    }    
    <GameOverModal />
</CascadingValue>

@code {

    public void Dispose()
    {
        Game.OnGameOver -= OnGameOver;
        Game.OnGameStart -= OnGameStart;
        Game.OnValidSubmit -= OnValidSubmit;
    }

    public Guess? GetGuessByIndex(int index)
    {
        return Game.Guesses.ElementAtOrDefault(index);
    }

    public GuessResult GetLetterResult(char letter)
    {
        var letters = Game.Guesses.SelectMany(g => g.Letters.Where(l => l.Value == letter));

        if (letters.Any(l => l.Result == GuessResult.Match))
            return GuessResult.Match;

        if (letters.Any(l => l.Result == GuessResult.Contains))
            return GuessResult.Contains;

        return GuessResult.None;
    }

    public bool HasBeenGuessed(char letter)
    {
        return Game.Guesses.Any(g => g.Contains(letter));
    }

    public bool IsCurrentGuess(int guessNumber)
    {
        return Game.Guesses.Count == guessNumber;
    }

    public GuessResult VerifyLetterPosition(char letter, int index)
    {
        if (Game.Solution.Value[index] == letter)
            return GuessResult.Match;

        if (Game.Solution.Value.Contains(letter))
            return GuessResult.Contains;

        return GuessResult.None;
    }

    protected override void OnInitialized()
    {
        Game.OnGameOver += OnGameOver;
        Game.OnGameStart += OnGameStart;
        Game.OnValidSubmit += OnValidSubmit;
    }

    protected override async Task OnInitializedAsync()
    {
        await Game.NewGame();
    }

    private async void OnGameOver(object? o, EventArgs e)
    {
        await PlayerHistory.SaveAttempt(Game.Solution, Game.Guesses.Count);
    }

    private void OnGameStart(object? o, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnValidSubmit(object? o, EventArgs e)
    {
        StateHasChanged();
    }
}