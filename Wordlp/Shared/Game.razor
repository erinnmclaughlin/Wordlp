@inject GameService GameService
@implements IDisposable

<PageTitle>Word-LP</PageTitle>

<CascadingValue Value="GameService">
    <GameBoard Guess="@Guess" />
    @if (GameService.IsGameOver)
    {
        <GameOverButtons />
    }
    else
    {
        <Keyboard OnKeyPress="AddLetter" OnBackspace="Backspace" OnSubmit="SubmitGuess" />
    }
    
    @if (ShowModal)
    {
        <GameOverModal OnClose="CloseModal" />
    }
    
</CascadingValue>

@code {

    private string Guess { get; set; } = string.Empty;
    private bool ShowModal { get; set; }

    public void AddLetter(char letter)
    {
        if (GameService.IsGameOver || Guess.Length >= 5)
            return;

        Guess += letter;
    }

    public void Backspace()
    {
        if (GameService.IsGameOver || Guess.Length == 0)
            return;

        Guess = Guess.Remove(Guess.Length - 1);
    }

    public void CloseModal()
    {
        ShowModal = false;
        StateHasChanged();
    }

    public async Task SubmitGuess()
    {
        if (GameService.IsGameOver || !GameService.IsValidGuess(Guess)) 
            return;

        await GameService.SubmitGuess(Guess);
        Guess = string.Empty;

        if (GameService.IsGameOver)
            ShowModal = true;
    }

    public void Dispose()
    {
        GameService.OnGameStart -= HandleGameStart;
    }

    protected override void OnInitialized()
    {
        GameService.OnGameStart += HandleGameStart;
    }

    private void HandleGameStart(object? obj, EventArgs e)
    {
        CloseModal();
        StateHasChanged();
    }
}