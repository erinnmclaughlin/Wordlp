@inject GameState GameState
@inject PlayerHistoryService PlayerHistory
@inject ValidWords ValidWords
@inject WordCollection Words

<PageTitle>Word-LP</PageTitle>

<CascadingValue Value="this">
    <GameBoard Guess="@Guess" />
    @if (IsGameOver)
    {
        <GameOverButtons />
    }
    else
    {
        <Keyboard OnKeyPress="AddLetter" OnBackspace="Backspace" OnSubmit="SubmitGuess" />
    }
    
    @if (ShowModal)
    {
        <GameOverModal Word="Word" OnClose="CloseModal" />
    }    
</CascadingValue>

@code {

    private List<Guess> Guesses { get; set; } = new();
    private string Guess { get; set; } = string.Empty;
    private bool ShowModal { get; set; }
    private Word Word { get; set; } = null!;

    public bool IsGameOver { get; private set; }

    public void AddLetter(char letter)
    {
        if (IsGameOver || Guess.Length >= 5)
            return;

        Guess += letter;
    }

    public void Backspace()
    {
        if (IsGameOver || Guess.Length == 0)
            return;

        Guess = Guess.Remove(Guess.Length - 1);
    }

    public void CloseModal()
    {
        ShowModal = false;
        StateHasChanged();
    }

    public async Task GameOver()
    {
        IsGameOver = true;
        await PlayerHistory.SubmitAttempt(Word, Guesses.Count);
    }

    public Guess? GetGuessByIndex(int index)
    {
        return Guesses.ElementAtOrDefault(index);
    }

    public GuessResult GetLetterResult(char letter)
    {
        var letters = Guesses.SelectMany(g => g.Letters.Where(l => l.Value == letter));

        if (letters.Any(l => l.Result == GuessResult.Match))
            return GuessResult.Match;

        if (letters.Any(l => l.Result == GuessResult.Contains))
            return GuessResult.Contains;

        return GuessResult.None;
    }

    public bool HasBeenGuessed(char letter)
    {
        return Guesses.Any(g => g.Contains(letter));
    }

    public bool IsCurrentGuess(int guessNumber)
    {
        return Guesses.Count == guessNumber;
    }

    public bool IsValidGuess(string word)
    {
        return word.Length == 5 && ValidWords.Contains(word, StringComparer.InvariantCultureIgnoreCase);
    }

    public async Task SubmitGuess()
    {
        if (IsGameOver) 
            return;

        if (!IsValidGuess(Guess))
        {
            GameState.NotifyInvalidSubmit();
            return;
        }

        List<GuessedLetter> letters = new();

        for (int i = 0; i < Guess.Length; i++)
        {
            var letter = Guess[i];

            /* No match */
            if (!Word.Value.Contains(letter))
            {
                letters.Add(new GuessedLetter(letter, GuessResult.None));
                continue;
            }

            /* Exact match */
            if (Word.Value[i] == letter)
            {
                letters.Add(new GuessedLetter(letter, GuessResult.Match));
                continue;
            }

            /* Partial match */
            if (Word.GetLetters().Any(l => l.Value == letter && Guess[l.Index] != l.Value))
            {
                letters.Add(new GuessedLetter(letter, GuessResult.Contains));
                continue;
            }

            letters.Add(new GuessedLetter(letter, GuessResult.None));
        }

        var guess = new Guess(letters);
        Guesses.Add(guess);

        if (Guesses.Count == GameSettings.MaxGuesses || guess.IsWin())
            await GameOver();

        Guess = string.Empty;

        if (IsGameOver)
            ShowModal = true;
    }

    public async Task StartNewGame()
    {
        CloseModal();
        Guesses = new();
        IsGameOver = false;
        await GetNewWord();
        StateHasChanged();
    }

    public GuessResult VerifyLetterPosition(char letter, int index)
    {
        if (Word.Value[index] == letter)
            return GuessResult.Match;

        if (Word.Value.Contains(letter))
            return GuessResult.Contains;

        return GuessResult.None;
    }

    protected override async Task OnInitializedAsync()
    {
        await StartNewGame();
    }

    private async Task GetNewWord()
    {
        var guessedWords = await PlayerHistory.GetHistory();
        var unguessedWords = Words.Words.Where(w => !guessedWords.Any(g => g.Word.Value == w.Value));

        if (unguessedWords.Any() == false)
            unguessedWords = Words.Words;

        var randomIndex = new Random().Next(0, unguessedWords.Count() - 1);
        var word = unguessedWords.ElementAt(randomIndex);

        Console.WriteLine(word.Value);

        Word = word;
    }
}