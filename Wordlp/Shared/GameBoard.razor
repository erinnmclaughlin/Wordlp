@inject BrowserResizeService Browser
@inject GameState GameState
@implements IDisposable

<div class="board-container">
    <div class="board" style="height: @(Height)px; width: @(Width)px;">
        @for (int i = 0; i < GameSettings.MaxGuesses; i++)
        {
            var rowIndex = i;

            <div class="@GetRowCss(rowIndex)">
                @for (int j = 0; j < GameSettings.WordLength; j++)
                {
                    var letterIndex = j;

                    <div>
                        <div class="@GetCellCss(rowIndex, letterIndex)">
                            @if (GetCellValue(rowIndex, letterIndex) is char letter)
                            {
                                <text>@letter</text>
                            }
                        </div>
                    </div>                    
                }
            </div>
        }
    </div>
</div>


@code {

    private int Height { get; set; }
    private int Width { get; set; }


    [CascadingParameter] private Game Game { get; set; } = null!;
    [Parameter] public string Guess { get; set; } = string.Empty;

    private Animations CurrentAnimation { get; set; } = Animations.None;

    public void Dispose()
    {
        BrowserResizeService.OnResize -= ResetHeight;
        GameState.OnInvalidSubmit -= async (o, e) => await PlayShakeAnimation();
        GC.SuppressFinalize(this);
    }

    protected override async Task OnInitializedAsync()
    {
        BrowserResizeService.OnResize += ResetHeight;
        GameState.OnInvalidSubmit += async (o,e) => await PlayShakeAnimation();
        await ResetHeight();
    }

    private string GetCellCss(int rowIndex, int letterIndex)
    {
        List<string> classes = new() { "cell" };

        if (Game.GetGuessByIndex(rowIndex) is Guess previousGuess)
        {
            classes.Add("guessed");
            classes.Add(previousGuess.GetResultAt(letterIndex) switch
            {
                GuessResult.Match => "match",
                GuessResult.Contains => "contains",
                _ => string.Empty
            });
        }
        else if (Game.CurrentGuess == rowIndex && letterIndex < Guess.Length)
        {
            classes.Add("has-letter");
        }

        return string.Join(" ", classes.Where(c => !string.IsNullOrWhiteSpace(c)));
    }

    private string GetRowCss(int rowIndex)
    {
        List<string> classes = new() { "row" };

        if (rowIndex == Game.CurrentGuess)
        {
            if (CurrentAnimation == Animations.Shake)
                classes.Add("shake");
        }

        return string.Join(' ', classes);
    }

    private char? GetCellValue(int rowIndex, int letterIndex)
    {
        if (Game.GetGuessByIndex(rowIndex) is Guess previousGuess)
            return previousGuess.Letters[letterIndex].Value;
        else if (Game.CurrentGuess == rowIndex && letterIndex < Guess.Length)
            return Guess[letterIndex];

        return null;
    }

    private async Task ResetHeight()
    {
        Height = (await Browser.GetInnerHeight()) - 200 - 41;
        Width = Height / 6 * 5;
        StateHasChanged();
    }

    private async Task PlayShakeAnimation()
    {
        CurrentAnimation = Animations.Shake;
        StateHasChanged();
        await Task.Delay(500);
        CurrentAnimation = Animations.None;
    }
}
