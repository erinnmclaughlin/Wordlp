@inject Game Game
@inject IResizeListener ResizeListener
@implements IDisposable

<div class="board-container">
    <div class="board" style="height: @(Size.Height)px; width: @(Size.Width)px;">
        @for (int i = 0; i < Game.MaxGuesses; i++)
        {
            var rowIndex = i;

            <div class="row">
                @for (int j = 0; j < Game.WordLength; j++)
                {
                    var letterIndex = j;

                    <div class="@GetCellCss(rowIndex, letterIndex)">
                        @if (GetCellValue(rowIndex, letterIndex) is char letter)
                        {
                            <span>@letter</span>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {

    private BrowserWindowSize Size { get; set; } = new BrowserWindowSize
    {
        Height = 420,
        Width = 350
    };

    [Parameter] public string Guess { get; set; } = string.Empty;

    public void Dispose()
    {
        ResizeListener.OnResized -= HandleResize;
    }

    protected override async Task OnInitializedAsync()
    {
        Size = await ResizeListener.GetBrowserWindowSize();
        ResizeListener.OnResized += HandleResize;
    }

    private string GetCellCss(int rowIndex, int letterIndex)
    {
        List<string> classes = new() { "cell" };

        if (Game.GetGuessByIndex(rowIndex) is Guess previousGuess)
        {
            classes.Add("guessed");
            classes.Add(previousGuess.GetResultAt(letterIndex) switch
            {
                GuessResult.Match => "match",
                GuessResult.Contains => "contains",
                _ => string.Empty
            });
        }
        else if (Game.CurrentGuess == rowIndex && letterIndex < Guess.Length)
        {
            classes.Add("has-letter");
        }

        return string.Join(" ", classes.Where(c => !string.IsNullOrWhiteSpace(c)));
    }

    private char? GetCellValue(int rowIndex, int letterIndex)
    {
        if (Game.Guesses.ElementAtOrDefault(rowIndex) is Guess previousGuess)
            return previousGuess.Letters[letterIndex].Value;
        else if (Game.CurrentGuess == rowIndex && letterIndex < Guess.Length)
            return Guess[letterIndex];

        return null;
    }

    private void HandleResize(object? _, BrowserWindowSize size)
    {
        var height = size.Height - 200 - 40;
        var width = height / 6 * 5;

        Size = new BrowserWindowSize
        {
            Height = height,
            Width = width
        };

        StateHasChanged();
    }
}
