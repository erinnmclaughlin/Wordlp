@inject BrowserResizeService Browser
@inject Game Game
@implements IDisposable

<div class="board-container">
    <div class="board" style="height: @(Height)px; width: @(Width)px;">
        @for (int i = 0; i < GameSettings.MaxGuesses; i++)
        {
            var rowIndex = i;

            <div class="@GetRowCss(rowIndex)">
                @for (int j = 0; j < GameSettings.WordLength; j++)
                {
                    var letterIndex = j;

                    <div>
                        <div class="@GetCellCss(rowIndex, letterIndex)">
                            @if (GetCellValue(rowIndex, letterIndex) is char letter)
                            {
                                <text>@letter</text>
                            }
                        </div>
                    </div>                    
                }
            </div>
        }
    </div>
</div>

@code {

    private int Height { get; set; }
    private int Width { get; set; }

    [Parameter] public string Guess { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> GuessChanged { get; set; }

    private Animations CurrentAnimation { get; set; } = Animations.None;

    public void Dispose()
    {
        BrowserResizeService.OnResize -= ResetHeight;
        Game.OnInvalidSubmit -= OnInvalidSubmit;
    }

    protected override void OnInitialized()
    {
        BrowserResizeService.OnResize += ResetHeight;
        Game.OnInvalidSubmit += OnInvalidSubmit;
    }

    protected override async Task OnInitializedAsync()
    {
        await ResetHeight();
    }

    private string GetCellCss(int rowIndex, int letterIndex)
    {
        List<string> classes = new() { "cell" };

        if (Game.Guesses.ElementAtOrDefault(rowIndex) is GuessedWord previousGuess)
        {
            classes.Add("guessed");

            classes.Add(previousGuess[letterIndex].MatchType switch
            {
                MatchTypes.Exact => "match",
                MatchTypes.Partial => "contains",
                _ => string.Empty
            });
        }

        return string.Join(" ", classes.Where(c => !string.IsNullOrWhiteSpace(c)));
    }

    private string GetRowCss(int rowIndex)
    {
        List<string> classes = new() { "row" };

        if (CurrentAnimation == Animations.Shake && IsCurrentRow(rowIndex))
            classes.Add("shake");

        return string.Join(' ', classes);
    }

    private char? GetCellValue(int rowIndex, int letterIndex)
    {
        /* Previous guesses */
        if (Game.Guesses.ElementAtOrDefault(rowIndex) is GuessedWord previousGuess)
            return previousGuess[letterIndex].Letter.Value;
        
        /* Current guess */
        if (IsCurrentRow(rowIndex) && letterIndex < Guess.Length)
            return Guess[letterIndex];

        /* Future guesses */
        return null;
    }

    private bool IsCurrentRow(int rowIndex) => Game.Guesses.Count == rowIndex;

    private async Task ResetHeight()
    {
        Height = (await Browser.GetInnerHeight()) - 200 - 41;
        Width = Height / 6 * 5;
        StateHasChanged();
    }

    private async void OnInvalidSubmit(object? o, EventArgs e) => await PlayShakeAnimation();

    private async Task PlayShakeAnimation()
    {
        CurrentAnimation = Animations.Shake;
        StateHasChanged();
        await Task.Delay(500);
        CurrentAnimation = Animations.None;
    }
}
