@implements IDisposable
@inject IGamePersistence Persistence
@inject Game Game

<header class="app-header">
    <div class="header-start">
        @if (CurrentPage != AppPages.Game)
        {
            <a class="icon-button" href="?">
                <i class="fa-solid fa-arrow-left fa-lg" />
            </a>
        }
    </div>
    <div class="app-title"><a href="?">@GetAppTitle()</a></div>
    <div class="header-end">
        @if (CurrentPage != AppPages.History && PlayerHasHistory)
        {
            <a class="icon-button" href="?page=history">
                <i class="fa-solid fa-clock-rotate-left fa-lg" />
            </a>
        }       
        <button class="icon-button" @onclick="() => DarkMode.Toggle()">
            <i class="@(DarkMode.IsEnabled ? "fa-solid" : "fa-regular") fa-moon fa-xl" />
        </button>
    </div>        
</header>

@code {

    [CascadingParameter] private AppPages CurrentPage { get; set; }
    [CascadingParameter] public DarkModeService DarkMode { get; set; } = null!;

    private bool PlayerHasHistory { get; set; }

    public void Dispose()
    {
        Game.OnGameOver -= OnGameOver;
        GC.SuppressFinalize(this);
    }

    protected override void OnInitialized()
    {
        Game.OnGameOver += OnGameOver;
    }

    protected override async Task OnParametersSetAsync()
    {
        PlayerHasHistory = await Persistence.HasGameHistory();
    }

    private string GetAppTitle()
    {
        return CurrentPage switch
        {
            AppPages.History => "HISTORY",
            _ => "WORDLP"
        };
    }

    private void OnGameOver(object? o, GameResult _)
    {
        if (PlayerHasHistory) return;

        PlayerHasHistory = true;
        StateHasChanged();
    }
}