@inject Game Game
@inject IGamePersistence Persistence
@inject NavigationManager NavigationManager
@implements IDisposable

<Modal @bind-IsActive="IsActive">
    @if (Result != null)
    {
        <div class="modal-content">
            <div class="solution">
                <LettersDisplay Word="@Game.Solution.Value" />
            </div>
            <div class="solution-description">
                <p>@Game.Solution.Description</p>
            </div>
        </div>

        <div style="padding: 1.5rem; padding-bottom: 0.75rem;">
            <ProgressBar NumberSolved="SolvedCount" />
        </div>        

        <div class="modal-buttons" style="padding-top: 0;">
            <GameOverButtons />
        </div>
    }    
</Modal>

@code {

    private bool IsActive { get; set; }
    private int SolvedCount { get; set; }
    private GameResult? Result { get; set; }

    public void Dispose()
    {
        Game.OnGameOver -= OnGameOver;
        Game.OnGameStart -= OnGameStart;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override void OnInitialized()
    {
        Game.OnGameOver += OnGameOver;
        Game.OnGameStart += OnGameStart;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var history = await Persistence.LoadHistory();
        SolvedCount = history.Count;
    }

    public void Close()
    {
        Result = null;
        IsActive = false;
        StateHasChanged();
    }

    private void Show()
    {
        IsActive = true;
        StateHasChanged();
    }

    private void OnGameOver(object? o, GameResult result)
    {
        Result = result;
        SolvedCount++;
        Show();
    }

    private void OnGameStart(object? o, EventArgs e) => Close();
    private void OnLocationChanged(object? o, LocationChangedEventArgs e) => Close();
}
