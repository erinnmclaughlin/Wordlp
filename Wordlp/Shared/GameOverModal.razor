@inject Game Game
@inject IGamePersistence Persistence
@inject NavigationManager NavigationManager
@implements IDisposable

@if (IsActive)
{
    <div class="modal-background" @onclick="Close" @onclick:stopPropagation="true"></div>

    <div class="modal-container" @onclick="Close" @onclick:stopPropagation="true">
        <div class="modal">
            <div class="close">
                <button type="button" @onclick="Close">
                    <i class="fa-solid fa-close fa-lg"></i>
                </button>
            </div>

            <div class="modal-content">
                <div class="solution">
                    <LettersDisplay Word="@Game.Solution.Value" />
                </div>
                <div class="solution-description">
                    <p>@Game.Solution.Description</p>
                </div>
            </div>

            <div class="modal-buttons">
                <GameOverButtons />
            </div>         
        </div>
    </div>   
}

@code {

    private bool IsActive { get; set; }
    private int SolvedCount { get; set; }
    private GameResult? Result { get; set; }

    public void Dispose()
    {
        Game.OnGameOver -= OnGameOver;
        Game.OnGameStart -= OnGameStart;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override void OnInitialized()
    {
        Game.OnGameOver += OnGameOver;
        Game.OnGameStart += OnGameStart;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var history = await Persistence.LoadHistory();
        SolvedCount = history.Count;
    }

    public void Close()
    {
        IsActive = false;
        StateHasChanged();
    }

    private void Show()
    {
        IsActive = true;
        StateHasChanged();
    }

    private void OnGameOver(object? o, GameResult result)
    {
        Result = result;
        SolvedCount++;
        Show();
    }

    private void OnGameStart(object? o, EventArgs e) => Close();
    private void OnLocationChanged(object? o, LocationChangedEventArgs e) => Close();
}
