@page "/"
@using Microsoft.AspNetCore.WebUtilities
@inject BrowserResizeService Browser
@inject DarkModeService DarkMode
@inject NavigationManager NavigationManager
@implements IDisposable

<div id="wordlp" class="@(DarkMode.IsEnabled ? "dark-mode" : "")">
    <header class="app-header">
        <div class="header-start">
            @if (GameMode != GamePages.Game)
            {
                <a class="icon-button" href="?">
                    <i class="fa-solid fa-arrow-left fa-lg" />
                </a>
            }
        </div>
        <div class="app-title"><a href="?">@GetAppTitle()</a></div>
        <div class="header-end">
            <a class="icon-button" href="?page=history">
                <i class="fa-solid fa-clock-rotate-left fa-lg" />
            </a>
            <button class="icon-button" @onclick="() => DarkMode.Toggle()">
                <i class="@(DarkMode.IsEnabled ? "fa-solid" : "fa-regular") fa-moon fa-xl" />
            </button>
        </div>        
    </header>

    <main style="height: @(Height)px; max-height: @(Height)px;">
        <CascadingValue Value="GameMode">
            @if (GameMode == GamePages.Game)
            {
                <Game />
            }
            else if (GameMode == GamePages.History)
            {
                <History />
            }
        </CascadingValue>
    </main>

</div>

@code {

    private int Height { get; set; }
    private GamePages GameMode { get; set; } = GamePages.Game;

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleNavigation;
        BrowserResizeService.OnResize -= ResetHeight;
        GC.SuppressFinalize(this);
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleNavigation;
        BrowserResizeService.OnResize += ResetHeight;

        await ResetHeight();
        await DarkMode.InitializeAsync();
    }

    protected override void OnParametersSet()
    {
        SetGameMode();
    }
    

    private string GetAppTitle()
    {
        return GameMode switch
        {
            GamePages.History => "HISTORY",
            _ => "WORDLP"
        };
    }

    private async Task ResetHeight()
    {
        Height = (await Browser.GetInnerHeight()) - 40;
        StateHasChanged();
    }

    private void HandleNavigation(object? o, LocationChangedEventArgs e)
    {
        SetGameMode();
        StateHasChanged();
    }

    private void SetGameMode()
    {
        var values = QueryHelpers.ParseNullableQuery(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query);

        if (values?.TryGetValue("page", out var value) != true)
        {
            GameMode = GamePages.Game;
            return;
        }

        GameMode = value.ToString().ToLower().Trim() switch
        {
            "history" => GamePages.History,
            _ => GamePages.Game
        };
    }
}