@page "/"
@inject WordCollection WordCollection

<PageTitle>Word-LP</PageTitle>

<div class="board">
    @for (int i = 0; i <6; i++)
    {
        <div class="row">
            @for (int j = 0; j < 5; j++)
            {
                var local_i = i;
                var local_j = j;

                <div class="cell">
                    @if (GuessIndex == local_i && Guess.ElementAtOrDefault(local_j) != default)
                    {
                        <span>@Guess[local_j]</span>
                    }
                </div>
            }
        </div>
    }
</div>

<div @ref="Keyboard" tabindex="0" class="keyboard" @onkeydown="HandleKeyPress" @onblur="FocusKeyboard">
    <div class="row">
        @foreach (var key in "QWERTYUIOP")
        {
            <button type="button">@key</button>
        }
    </div>
    <div class="row">
        <div class="spacer"></div>
        @foreach (var key in "ASDFGHJKL")
        {
            <button type="button">@key</button>
        }
        <div class="spacer"></div>
    </div>
    <div class="row">
        <button type="button" style="flex: 1.5;">ENTER</button>
        @foreach (var key in "ZXCVBNM")
        {
            <button type="button">@key</button>
        }
        <button type="button" style="flex: 1.5;">BKSP</button>
    </div>
</div>

@code {

    private const string Letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private int GuessIndex { get; set; } = 0;
    private string Guess { get; set; } = string.Empty;

    private Word? RandomWord { get; set; }
    private ElementReference Keyboard { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await FocusKeyboard();

    }

    protected override void OnInitialized()
    {
        GetRandomWord();
    }

    private void GetRandomWord()
    {
        RandomWord = WordCollection.GetRandomWord();
    }

    private async Task FocusKeyboard()
    {
        await Keyboard.FocusAsync();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        var key = e.Key.ToUpper();

        if (key == "BACKSPACE")
        {
            Guess = Guess.Substring(0, Math.Max(0, Guess.Length - 1));
            return;
        }

        if (Guess.Length < 5 && Letters.Contains(key))
            Guess += key;
        
    }
}